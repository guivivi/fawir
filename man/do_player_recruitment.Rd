% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_player_recruitment.R
\name{do_player_recruitment}
\alias{do_player_recruitment}
\title{Player recruitment}
\usage{
do_player_recruitment(data, rank_value = 50, skip_grams_window_value = 5, 
                      x_max_value = 10, alpha = 0.7, top_simil = 3, 
                      max_scaling = FALSE, query)
}
\arguments{
\item{data}{Input data set with the numeric and text variables from a number of players. 
It must contain a column called scouting_report with the text descriptions.}

\item{rank_value}{Number to indicate the desired dimension for the latent vectors. Default 50.}

\item{skip_grams_window_value}{Number to indicate the window for term-co-occurence 
matrix construction. Default 5.}

\item{x_max_value}{Number to indicate the maximum number of co-occurrences to use in the 
weighting function. Default 10.}

\item{alpha}{Number between 0 and 1 to combine text-based cosine similarity 
and numeric similarity into a final similarity score. The closer to 1, the more important 
are the numeric variables. Default 0.7.}

\item{top_simil}{Number of potential candidates to return.}

\item{max_scaling}{Logical to indicate if the term-co-occurence matrix must be scaled. 
This is suggested when there are words that are repeated in most documents. Default FALSE.}

\item{query}{String with the description of a type of player of interest.}
}
\value{
A data frame.
}
\description{
Algorithm for player recruitment using both the numeric and text description
of the players. An input data set collects the information from a number of
players. The user sends a query with the characteristics of the player of
interest and the algorithm returns a number of potential candidates.
}
\examples{
\dontrun{
library(dplyr)
library(tidyr)

# Prepare the scouting report:
df0 <- pesmaster_sample \%>\% 
  select(-skills, -playing_style_ai) \%>\%
  unite("scouting_report", c(characteristics, skills_descr, playing_style_ai_descr), sep = ", ") \%>\%
  mutate(scouting_report = gsub(", NA", "", scouting_report)) 

# Define the type of player to search for:
query <- "A predatory striker, attacking of 80, kicking power of 72, dribbling of 67"

# Run the algorithm:
res <- do_player_recruitment(df0, 50, 5, 10, 0.5, 3, TRUE, query)
res \%>\% select(league, team, name, position, playing_style)
}                           

}
\author{
Guillermo Vinue with the support of ChatGPT.
}
